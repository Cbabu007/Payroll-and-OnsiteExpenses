@{
    Layout = "~/Views/Admin/AdminLayout.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <title>ABC Construction</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        html, body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            height: 100%;
            width: 100%;
            overflow: hidden;
            box-sizing: border-box;
        }

        .main-container {
            display: flex;
            height: 100vh;
            width: 100vw;
            overflow: hidden;
        }

        .sidebar {
            position: fixed; /*  sidebar starts from top */
            top: 0;
            left: 0;
            height: 100vh;
            width: 264px;
            background-color: #0990F0;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 20px;
            box-sizing: border-box;
            overflow-y: auto;
            overflow-x: hidden;
            scrollbar-width: thin;
            z-index: 1000; /* ensures it's above other content */
        }


        .side-btn {
            width: 100%;
            height: 83px;
            background-color: #0990F0;
            color: white;
            font-weight: bold;
            font-size: 1rem;
            border: none;
            cursor: pointer;
        }

            .side-btn:hover {
                background-color: #066AC0;
            }

        .right-content {
            display: flex;
            flex-direction: column;
            flex: 1;
            height: 100vh;
            width: 100%;
            overflow: hidden;
            box-sizing: border-box;
        }

        .header {
            height: 176px;
            background-color: #0990F0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            flex-shrink: 0;
            width: 100%;
        }

            .header h1 {
                font-size: 2.5rem;
                margin: 0;
                text-align: center;
            }

        .content-frame {
            flex: 1;
            background-color: white;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow-y: auto;
            overflow-x: hidden;
            width: 100%;

            box-sizing: border-box;
        }

        .dynamic-frame {
            width: 100%;
            max-width: 1260px;
            border: 4px solid black;
            border-radius: 75px;
            padding: 1.5rem;
            background-color: white;
            overflow-y: auto;
            overflow-x: hidden;
            scrollbar-width: none;
            -ms-overflow-style: none;
            box-sizing: border-box;
        }

            .dynamic-frame::-webkit-scrollbar {
                display: none;
            }

        .frame {
            width: 100%;
            max-width: 1260px;
            background: white;
            padding: 2rem;
            border: 2px solid #000;
            border-radius: 40px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin: 0 auto;
        }

        h2 {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .table-container {
            overflow-x: auto;
            width: 100%;

        }

        table {
            width: 100%;
            border-collapse: collapse;
            text-align: center;
        }

        th, td {
            border: 1px solid #000;
            padding: 10px;
            vertical-align: top;
        }

        .status-cell {
            text-align: left;
            padding-left: 10px;
        }

        .status-label {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 4px 0;
        }

        .ok-btn,
        .pending-btn,
        .reject-btn {
            color: white;
            border: none;
            padding: 4px 10px;
            margin: 2px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .ok-btn {
            background-color: green;
        }

        .pending-btn {
            background-color: orange;
        }

        .reject-btn {
            background-color: red;
        }

        .pdf-icon {
            width: 30px;
            height: auto;
        }

        .close-btn {
            background-color: red;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
        }

        .completed-label {
            color: green;
            font-weight: bold;
        }

        .incomplete-label {
            color: red;
            font-weight: bold;
        }

    </style>

</head>
<body>
    
        <!-- Right Side -->
       
            <div class="content-frame">
                <h2 style="margin-top: 20px;">Expenses Claim Management</h2>
                <div class="dynamic-frame">
                    <div class="frame">
                        <div class="table-container">
                            <table>
                                <thead>
                                    <tr>
                                        <th>PDF</th>
                                        <th>Employee ID</th>
                                        <th>Project Name</th>
                                        <th>Travel</th>
                                        <th>Food</th>
                                        <th>Accommodation</th>
                                        <th>Total Amount</th>
                                        <th>Status</th>
                                        <th>Close</th>

                                    </tr>
                                </thead>
                                <tbody id="expenseTableBody">
                                    <!-- Dynamically inserted rows -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
           
    

        <!-- Right Side (including right-content and right-bar)-->


    <script>
           function loadExpenses() {
                fetch('/api/ExpenseApproval/GetSummary')
                    .then(res => res.json())
                    .then(data => {
                        const tbody = document.getElementById("expenseTableBody");
                        tbody.innerHTML = "";

                        data.forEach(item => {
                             const isCompleted =
                    item.travelStatus === "OK" &&
                    item.foodStatus === "OK" &&
                    item.accommodationStatus === "OK";
                const closeStatus = isCompleted ? "Completed" : "Incomplete";

                            tbody.innerHTML += `
                                    <tr>
                                        <td>
                                            <a href="${getRelativePdfPath(item.uploadFilePath)}" target="_blank">
                                                <img src="https://cdn-icons-png.flaticon.com/512/337/337946.png" alt="PDF" class="pdf-icon">
                                            </a>
                                        </td>
                                        <td>${item.employeeId}</td>
                                        <td>${item.projectName}</td>
                                        <td>₹${item.travelAmount ?? 0}</td>
                                        <td>₹${item.foodAmount ?? 0}</td>
                                        <td>₹${item.accommodationAmount ?? 0}</td>
                                        <td>₹${(item.travelAmount ?? 0) + (item.foodAmount ?? 0) + (item.accommodationAmount ?? 0)}</td>
                                        <td class="status-cell">
                                            ${generateStatusButtons(item.id, "Travel", item.travelStatus)}
                                            ${generateStatusButtons(item.id, "Food", item.foodStatus)}
                                            ${generateStatusButtons(item.id, "Accommodation", item.accommodationStatus)}
                                        </td>
                                         <td>
                            <span class="${isCompleted ? 'completed-label' : 'incomplete-label'}">${closeStatus}</span>
                        </td>
                                    </tr>`;
                        });
                    })
                    .catch(err => console.error("Error loading expenses:", err));
            }

        function generateStatusButtons(id, type, currentStatus) {
            return `
                    <div class="status-label">${type}
                        <button class="ok-btn ${currentStatus === 'OK' ? 'active' : ''}" onclick="updateStatus(${id}, '${type}', 'OK')">OK</button>
                        <button class="pending-btn ${currentStatus === 'Pending' ? 'active' : ''}" onclick="updateStatus(${id}, '${type}', 'Pending')">Pending</button>
                        <button class="reject-btn ${currentStatus === 'Reject' ? 'active' : ''}" onclick="updateStatus(${id}, '${type}', 'Reject')">Reject</button>
                    </div>`;
        }

        function updateStatus(id, category, status) {
            const formData = new FormData();
            formData.append("id", id);
            formData.append("category", category);
            formData.append("status", status);

            fetch("/api/ExpenseApproval/UpdateStatus", {
                method: "POST",
                body: formData
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        alert(`Status for ${category} updated to ${status}`);
                        loadExpenses(); // Refresh
                    } else {
                        alert("Update failed.");
                    }
                })
                .catch(err => alert("Error: " + err.message));
        }

        function removeExpenseRow(id) {
            if (!confirm("Are you sure you want to delete this expense?")) return;

            const formData = new FormData();
            formData.append("id", id);

            fetch("/api/ExpenseApproval/DeleteExpense", {
                method: "POST",
                body: formData
            })
            .then(res => {
                if (res.status === 204) {
                    const row = document.getElementById(`expense-row-${id}`);
                    if (row) row.remove();
                } else {
                    return res.json().then(data => {
                        alert("Delete failed: " + (data.message || ""));
                    });
                }
            })
            .catch(err => alert("Error: " + err.message));
        }

        function getRelativePdfPath(fullPath) {
            if (!fullPath) return "#";
            const idx = fullPath.toLowerCase().indexOf("wwwroot");
            if (idx !== -1) {
                return fullPath.substring(idx + "wwwroot".length).replace(/\\/g, "/");
            }
            if (fullPath.startsWith("/")) return fullPath;
            return "/" + fullPath.replace(/\\/g, "/");
        }

        // Run summary generation once (optional)
        fetch('/api/ExpenseApproval/GenerateSummary', { method: 'POST' })
            .then(res => res.json())
            .then(data => {
                console.log(data.message);
                loadExpenses();
            });

        window.onload = loadExpenses;
    </script>



</body>
</html>
